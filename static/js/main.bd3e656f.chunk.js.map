{"version":3,"sources":["components/AppNavigator.js","config/index.js","redux/actions.js","components/PokemonDetails.js","components/PokemonCard.js","containers/Favourites.js","containers/Pokedex.js","redux/reducer.js","redux/store.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","AppBar","backgroundColor","link","textDecoration","title","cursor","color","marginRight","AppNavigator","classes","className","position","Toolbar","to","Typography","variant","POKEMON_API_URL","TOGGLE_FAVOURITE","PokemonDetails","props","state","pokemon","match","this","id","params","axios","get","then","response","status","console","log","data","setState","found","favourites","map","p","name","sprites","height","weight","types","Box","pokedexContainer","textTitle","pokemonImage","src","front_default","alt","pokemonInfoContainer","separator","Grid","container","item","md","sm","Button","favourite","onClick","toggleFavourite","style","favouriteChecker","fontSize","text","pokemonType","type","CircularProgress","Component","withStyles","marginTop","textAlign","borderRadius","paddingTop","textTransform","FontFamily","width","bottom","connect","dispatch","payload","card","cardMedia","margin","cardContent","PokemonCard","image","xs","Card","CardMedia","CardContent","Favourites","spacing","padding","Pokedex","useState","pokemonData","setPokemonData","useEffect","results","newPokemonData","forEach","index","pokemonObject","url","push","initialData","pokemonReducer","action","pokemonFromFavourite","find","favPokemon","filter","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","App","loading","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd3e656f.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Link } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n    AppBar: {\n        backgroundColor: 'black',\n    },\n    link: {\n        textDecoration: 'none',\n    },\n    title: {\n        cursor: 'pointer',\n        color: 'white',\n        marginRight: 15,\n    }\n}))\n\nexport default function AppNavigator() {\n    const classes = useStyles()\n    return (\n        <AppBar className={classes.AppBar} position=\"fixed\">\n            <Toolbar>\n                <Link to=\"/proto-pokedex\" className={classes.link}>\n                    <Typography className={classes.title} variant=\"h6\">Pokedex</Typography>\n                </Link>\n                <Link to=\"/proto-pokedex/favourites\" className={classes.link}>\n                    <Typography className={classes.title} variant=\"h6\" >Favourites</Typography>\n                </Link>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","export const POKEMON_API_URL = \"https://pokeapi.co/api/v2/pokemon\"\nexport const IMAGE_API_URL = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\"","export const TOGGLE_FAVOURITE = \"TOGGLE_FAVOURITE\"\n\nexport const toggleFavourite = (pokemon) => ({\n    type: TOGGLE_FAVOURITE,\n    payload: pokemon\n}) ","import axios from 'axios'\nimport React, { Component } from 'react'\nimport { POKEMON_API_URL } from '../config'\nimport { Box, CircularProgress, Grid, Typography, Button } from '@material-ui/core'\nimport { withStyles } from '@material-ui/styles'\nimport FavoriteIcon from '@material-ui/icons/Favorite'\nimport { connect } from 'react-redux'\nimport { toggleFavourite } from '../redux/actions'\n \nconst styles = (theme) => ({\n    pokedexContainer: {\n        height: '84vh',\n        backgroundColor: 'black',\n        color: 'white',\n        marginTop: 75,\n        textAlign: 'center',\n        borderRadius: 5,\n        paddingTop: 30\n    },\n    textTitle: {\n        textTransform: 'upperCase',\n        FontFamily: 'Fantasy',\n    },\n    pokemonImage: {\n        width: '170px',\n        height: '170px',\n    },\n    pokemonInfoContainer: {\n        bottom: 60,\n        position: 'absolute',\n        width: '100%',\n    },\n    separator: {\n        height: '0.01mm',\n        width: '95%',\n    },\n    favourite: {\n        height: 50,\n        width: 50,\n        marginTop: 15,\n    },\n    text: {\n        fontSize: 30,\n    },\n})\nclass PokemonDetails extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            pokemon: null\n        }\n    }\n\n    componentDidMount() {\n        // axios\n        const { match } = this.props\n        const { id } = match?.params\n        axios.get(POKEMON_API_URL + \"/\" + id)\n         .then((response) => {\n             if (response.status >= 200 && response.status < 300) {\n                 console.log(response.data, 'repsonse.data fdo')\n                 this.setState({ pokemon: response.data })\n             }\n         })\n    }\n\n    favouriteChecker(pokemon) {\n        let found = false\n\n        this.props.favourites?.map((p) => {\n            if (p.id === pokemon.id) {\n                found = true\n            } \n        })\n        return found\n    }\n\n    render() {\n        const { classes } = this.props\n        const { pokemon } = this.state\n\n        console.log(this.props.favourites, 'favourites fdo')\n        if (pokemon) {\n            const { name, sprites, height, weight, types } = pokemon\n            return(\n                <Box>\n                    <Box className={classes.pokedexContainer}>\n                        <Typography className={classes.textTitle} variant=\"h1\" >{name}</Typography>\n                        <img className={classes.pokemonImage} src={sprites.front_default} alt=\"\" />\n                        <Box className={classes.pokemonInfoContainer}>\n                            <hr className={classes.separator}/>\n                            <Grid container>\n                                <Grid item md={1} sm={1}>\n                                    <Button className={classes.favourite}>\n                                        <FavoriteIcon onClick={() => this.props.toggleFavourite(pokemon)} style={{ color: this.favouriteChecker(pokemon) ? 'red' : 'white', fontSize: 50 }}/>\n                                    </Button>\n                                </Grid>\n                                <Grid item md={2} sm={2}>\n                                    <Typography className={classes.text}>\n                                        Name <br />{name}\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={2} sm={2}>\n                                    <Typography className={classes.text}>\n                                        Height <br />{height}m\n                                    </Typography>                                                                      \n                                </Grid>\n                                <Grid item md={2} sm={2}>\n                                    <Typography className={classes.text}>\n                                        Weight <br />{weight}Kg\n                                    </Typography>                                                                      \n                                </Grid>     \n                                {types.map((pokemonType) => {\n                                    const { name } = pokemonType.type\n                                    return (\n                                        <Grid item md={2} sm={2}>\n                                            <Typography className={classes.text}>\n                                                Type <br />{name}\n                                            </Typography>                                                                      \n                                        </Grid>   \n                                    )\n                                })}                                                               \n                            </Grid>\n                        </Box>\n                    </Box>\n                </Box>\n            )\n        } else {\n            return <CircularProgress />\n        }\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    favourites: state.favourites\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    toggleFavourite: (pokemon) => dispatch(toggleFavourite(pokemon))\n})\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(PokemonDetails))\n","import React from 'react'\nimport { Card, CardContent, CardMedia, Grid, makeStyles, Typography } from '@material-ui/core'\nimport { Link } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        cursor: 'pointer',\n        backgroundColor: 'black',\n        color: 'white',\n        \"&:hover\": {\n            backgroundColor: \"rgb(90, 90, 90)\",\n        },\n    },\n    cardMedia: {\n        margin: 'auto',\n        width: 130,\n        height: 130,\n    },\n    cardContent: {\n        textAlign: 'center',\n    },\n    link: {\n        textDecoration: 'none',\n    }\n}))\n\nexport default function PokemonCard(props) {\n    const classes= useStyles()\n    const { pokemon, image } = props\n    const { id, name } = pokemon\n\n\n    return (\n        <Grid item xs={12} sm={2}>\n            <Link to={`/proto-pokedex/pokemon/${id}`} className={classes.link}>\n                <Card className={classes.card}>\n                    <CardMedia className={classes.cardMedia} image={image}></CardMedia>\n                    <CardContent className={classes.cardContent}>\n                        <Typography>{name}</Typography>\n                    </CardContent>\n                </Card>            \n            </Link>\n        </Grid>\n    )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Box, Grid, withStyles } from '@material-ui/core'\nimport PokemonCard from '../components/PokemonCard'\n\nconst styles = (theme) => ({\n    pokedexContainer: {\n        height: '100vh',\n        backgroundColor: 'rgb(68, 68, 68)',\n        paddingTop: 80,\n        textAlign: 'center',\n    },\n})\nexport class Favourites extends Component {\n    render() {\n        const { classes, favourites } = this.props\n        return (\n            <Box>\n                <Grid container spacing={2} className={classes.pokedexContainer}>\n                    {favourites.map((pokemon) => (\n                        <PokemonCard pokemon={pokemon} key={pokemon.id} image={pokemon.sprites.front_default}/>\n                    ))}\n                </Grid>\n            </Box>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    favourites: state.favourites\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    \n}\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(Favourites))\n","import { Box, CircularProgress, Grid } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport { IMAGE_API_URL, POKEMON_API_URL } from '../config'\nimport PokemonCard from '../components/PokemonCard'\nimport { makeStyles } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n    pokedexContainer: {\n        textAlign: 'center',\n        padding: \"70px 10px 0px 10px\",\n        backgroundColor: 'rgb(68, 68, 68)'\n    }\n}))\n\nexport default function Pokedex() {\n    const classes = useStyles()\n\n    const [pokemonData, setPokemonData] = useState(null)\n    useEffect(() => {\n        axios.get(POKEMON_API_URL + \"?limit=800\" )\n         .then((response) => {\n             console.log(response.data)\n             if (response.status >= 200 && response.status < 300) {\n                const { results } = response.data\n                let newPokemonData = []\n                results.forEach((pokemon, index) => {\n                    index++\n                    let pokemonObject = {\n                        id: index,\n                        url: IMAGE_API_URL + index + \".png\",\n                        name: pokemon.name\n                    }\n                    newPokemonData.push(pokemonObject)\n                })\n                setPokemonData(newPokemonData)\n            }\n        })\n    }, [])\n\n    return (\n        <Box>\n            {pokemonData ? \n            (<Grid className={classes.pokedexContainer} container spacing={2}>\n                {pokemonData.map(pokemon => {\n                    return <PokemonCard pokemon={pokemon} image={pokemon.url}  key={pokemon.id}/> //<h1 style={{ marginLeft: 10 }}>{pokemon.name}</h1>\n                })} \n            </Grid>) : <CircularProgress style={{ marginTop: 100 }}/>}\n        </Box>\n    )\n}\n","import { TOGGLE_FAVOURITE } from \"./actions\"\n\nconst initialData ={\n    favourites: []\n}\n\nconst pokemonReducer = (state = initialData, action) => {\n    switch(action.type) {\n        case TOGGLE_FAVOURITE:\n            let pokemon = action.payload\n            let pokemonFromFavourite = state.favourites.find((favPokemon) => \n            pokemon.id === favPokemon.id)\n            return {\n                ...state,\n                favourites: pokemonFromFavourite ? \n                    [...state.favourites.filter((pokemon) => pokemon.id !== pokemonFromFavourite.id)]:\n                    [...state.favourites, action.payload]\n            }\n        default:\n            return state;\n    }\n}\n\nexport default pokemonReducer","import { createStore } from 'redux'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nimport rootReducer from './reducer'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport let store = createStore(persistedReducer)\nexport let persistor = persistStore(store)\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport AppNavigator from './components/AppNavigator'\nimport PokemonDetails from './components/PokemonDetails'\nimport Favourites from './containers/Favourites'\nimport Pokedex from './containers/Pokedex'\nimport { store, persistor } from './redux/store'\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router>\n          <AppNavigator />\n          <Route exact path=\"/proto-pokedex/\" component={Pokedex}></Route>\n          <Route exact path=\"/proto-pokedex/pokemon/:id\" component={PokemonDetails}></Route>\n          <Route exact path=\"/proto-pokedex/favourites\" component={Favourites}></Route>\n        </Router>   \n      </PersistGate>\n    </Provider>\n\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}